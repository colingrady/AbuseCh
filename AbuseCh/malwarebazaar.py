import os
import json
from io import BytesIO

import requests
from pyzipper import AESZipFile

from ._version import __version__


MALWAREBAZAAR_API_URL = 'https://mb-api.abuse.ch/api/v1/'

MALWAREBAZAAR_API_KEY_ENV = 'MALWAREBAZAAR_API_KEY'

MALWAREBAZAAR_ZIP_PASSWORD = b'infected'


class MalwareBazaar(object):

    def __init__(self, api_key=None, api_url=MALWAREBAZAAR_API_URL):
        '''
        Prepare the MalwareBazaar API
        '''

        # Save the API URL
        self._api_url = api_url

        # Get and prepare the session that will be used for all API calls
        self._session = requests.session()
        self._session.headers.update({
            'User-Agent': f'abuse_ch-malwarebazaar-api/{__version__}',
        })

        # If no API key is provided, see if it's in the environ
        if api_key is None:
            api_key = os.environ.get(MALWAREBAZAAR_API_KEY_ENV, None)

        # If we have an API key, add it to session headers
        if api_key is not None:
            self._session.headers['API-KEY'] = api_key

    def _request(self, method, **kwargs):
        '''
        Internal method to handle API requests. Raises for errors and
        parses JSON or returns raw data as requested
        '''

        # Are we expecting a data response?
        expect_data = kwargs.pop('expect_data', False)

        # Make the request
        resp = self._session.request(method, self._api_url, **kwargs)
        resp.raise_for_status()

        # Are we expecting raw data to be returned?
        if expect_data:
            try:
                res = resp.json()
            except Exception:
                res = resp.content
            finally:
                return res

        # Expecting a JSON response
        else:
            try:
                return resp.json()
            except Exception:
                raise RuntimeError(f'MalwareBazaar API unexpected response: {resp.content}')

    def upload_data(self, file_data, anonymous=0, tags=None, references=None, context=None, delivery_method=None):

        # Start composing the submission data
        data = {
            'anonymous': anonymous
        }

        # Add the tags
        if tags is not None:
            if isinstance(tags, str):
                data['tags'] = [tags]
            elif isinstance(tags, set):
                data['tags'] = list(tags)
            elif isinstance(tags, (list, tuple)):
                data['tags'] = tags
            else:
                raise ValueError('"tags" must be a str, list, tuple, or set')

        # Add the references
        if references is not None:
            if isinstance(references, dict):
                data['references'] = references
            else:
                raise ValueError('"references" must be a dict')

        # Add the context
        if context is not None:
            if isinstance(context, dict):
                data['context'] = context
            else:
                raise ValueError('"context" must be a dict')

        # Add the delivery method
        if delivery_method is not None:
            if isinstance(delivery_method, str):
                data['delivery_method'] = delivery_method
            else:
                raise ValueError('"delivery_method" must be a dict')

        # Prepare the submission
        files = {
            'json_data': (None, json.dumps(data), 'application/json'),
            'file': (file_data)
        }

        # Make the request and return the result
        resp = self._request('POST', files=files)
        return resp

    def upload(self, file_path, anonymous=0, tags=None, references=None, context=None, delivery_method=None):

        # Read the file
        file_data = open(file_path, 'rb').read()

        # Pass to the upload_data method and return the result
        resp = self.upload_data(file_data, anonymous, tags, references, context, delivery_method)
        return resp

    def download(self, sha256, decompress=True):

        # Prepare the request data
        data = {
            'query': 'get_file',
            'sha256_hash': sha256
        }

        # Make the request and return the result
        resp = self._request('POST', data=data, expect_data=True)

        # Extracting it?
        if decompress:

            # Try to extract the file
            sample_zip = AESZipFile(BytesIO(resp))
            file_list = sample_zip.infolist()
            resp = sample_zip.read(file_list[0].filename, MALWAREBAZAAR_ZIP_PASSWORD)

        return resp

    def query_malware(self, sha256):

        # Prepare the request data
        data = {
            'query': 'get_info',
            'sha256_hash': sha256
        }

        # Make the request and return the result
        resp = self._request('POST', data=data)
        return resp

    def query_tag(self, tag, limit=50):

        # Prepare the request data
        data = {
            'query': 'get_taginfo',
            'tag': tag,
            'limit': limit
        }

        # Make the request and return the result
        resp = self._request('POST', data=data)
        return resp

    def query_signature(self, signature, limit=50):

        # Prepare the request data
        data = {
            'query': 'get_siginfo',
            'signature': signature,
            'limit': limit
        }

        # Make the request and return the result
        resp = self._request('POST', data=data)
        return resp

    def query_clamav_sig(self, clamav_sig, limit=50):

        # Prepare the request data
        data = {
            'query': 'get_clamavinfo',
            'clamav': clamav_sig,
            'limit': limit
        }

        # Make the request and return the result
        resp = self._request('POST', data=data)
        return resp

    def query_imphash(self, imphash, limit=50):

        # Prepare the request data
        data = {
            'query': 'get_imphash',
            'imphash': imphash,
            'limit': limit
        }

        # Make the request and return the result
        resp = self._request('POST', data=data)
        return resp

    def query_tlsh(self, tlsh, limit=50):

        # Prepare the request data
        data = {
            'query': 'get_tlsh',
            'tlsh': tlsh,
            'limit': limit
        }

        # Make the request and return the result
        resp = self._request('POST', data=data)
        return resp

    def query_yara_rule(self, yara_rule, limit=50):

        # Prepare the request data
        data = {
            'query': 'get_yarainfo',
            'yara_rule': yara_rule,
            'limit': limit
        }

        # Make the request and return the result
        resp = self._request('POST', data=data)
        return resp

    def query_signing_issuer(self, issuer_cn):

        # Prepare the request data
        data = {
            'query': 'get_issuerinfo',
            'issuer_cn': issuer_cn
        }

        # Make the request and return the result
        resp = self._request('POST', data=data)
        return resp

    def query_signing_subject(self, subject_cn):

        # Prepare the request data
        data = {
            'query': 'get_subjectnfo',
            'subject_cn': subject_cn
        }

        # Make the request and return the result
        resp = self._request('POST', data=data)
        return resp
